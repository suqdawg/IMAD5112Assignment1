package com.example.mockassignment

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import android.widget.TextView

class MainActivity : AppCompatActivity() {

    //private late init var timeEditText: EditText
    private lateinit var searchButton: Button
    private lateinit var resetButton: Button
    private lateinit var resultTextView: TextView
    private lateinit var editTextText: EditText

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        //timeEditText = findViewById<EditText>(R.id.timeEditText)
        searchButton = findViewById<Button>(R.id.searchButton)
        resetButton = findViewById<Button>(R.id.resetButton)
        resultTextView = findViewById<TextView>(R.id.resultTextView)
        editTextText = findViewById<EditText>(R.id.editTextText)

        searchButton.setOnClickListener {

            Toast.makeText(this,"Searching", Toast.LENGTH_SHORT).show()

            //val timeInput = timeEditText.text.toString().trim().lowercase()

            val textInput :String = editTextText.text.toString().trim().lowercase()

            //val mealSuggestion = suggestMeal(timeInput)

            val mealSuggestion = suggestMeal(textInput)

            resultTextView.text = mealSuggestion
        }

        resetButton.setOnClickListener {
            Toast.makeText(this, "Reset", Toast.LENGTH_SHORT).show()

            //timeEditText.text.clear()

            editTextText.text.clear()

            resultTextView.text = "Meal suggestion will appear here"

        }
    }

    private fun suggestMeal(input: String): String {
        return when {
            input.isEmpty() -> "Please enter a time (e.g., morning, 14:00)."

            input.contains("morning") || input.contains("breakfast")-> "Suggestion:\n\n1.\nEggs w/Toast\nand Bacon\n\n2.\nKellogs Cereal\nw/Low Fat Milk\n\n3.\nLow Sugar Muffin\nw/Black Coffee"
            input.contains("lunch") || input.contains("afternoon")-> "Suggestion:\n\n1.\nHam & Mayo\nSandwich\n\n2.\nGreen Salad\nw/Feta Cheese\n\n3.\nVegetable Soup\nw/Dry Bread"
            input.contains("dinner") || input.contains("evening") -> "Suggestion:\n\n1.\nRoasted Chicken\nw/Vegetable Stir-fry\n\nBeef Mince\nw/Macaroni &Sauce\n\nBrown Rice\nw/Boerewors\n&\nMushroom Sauce"
            input.contains("broke")-> "Suggestion:\n\nFry 2 Eggs made with aromat\nToast 2 Brown Wholewheat Slices of\nBread\n\nFry 4 strips of Bacon\nno salt needed"
            input.contains("no cash")-> "Suggestion:\n\nCut 2 Ham Slices\n&\nSpread Mayonnaise on your Sandwich\nand finish off with\nfruit juice"
            input.contains("late to cook")-> "Suggestion:\n\nRoast a quarter leg\nof chicken in oven\n\nThrow vegetable\nstirfry into the pan\nadd greek sauce to\nfinish it off"

            input.contains(":") -> {
                try {
                    val hour = input.split(":")[0].toInt()
                    when (hour) {
                        in 0..10 -> "Need a hint?\ntype\n\n'broke'"
                        in 11..16 -> "Need a hint?\ntype\n\n'no cash'"
                        in 17..23 -> "Need a hint?\ntype\n\n'late to cook'"
                        else -> "Invalid hour entered."
                    }
                } catch (e: Exception) {
                    "Invalid format.\nUse HH:MM or\n'Morning', 'Easy Breakfast'."
                }
            }

            input.toIntOrNull() != null -> {
                try {
                    val hour = input.toInt()
                    when(hour) {
                        in 0..10 -> "Need a hint?\ntype\n\n'broke'"
                        in 11..16 -> "Need a hint?\ntype\n\n'no cash'"
                        in 17..23 -> "Need a hint?\ntype\n\n'late to cook'"
                        else -> "Invalid hour entered\n\n(type a number for hints)."
                    }
                } catch (e:Exception) {
                    "Invalid Input"
                }
            }

            else -> "Couldn't recognise the time.\n\n(type a number for hints)."

            }
        }

}
